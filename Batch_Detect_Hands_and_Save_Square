import os
import cv2
import mediapipe as mp
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.ttk import Progressbar
import threading
import subprocess

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=True, max_num_hands=2)
mp_drawing = mp.solutions.drawing_utils

def select_folder():
    folder_path = filedialog.askdirectory()
    if folder_path:
        folder_label.config(text=f"Selected Folder: {folder_path}")

def process_images(folder_path):
    output_folder = os.path.join(folder_path, "processed")
    os.makedirs(output_folder, exist_ok=True)
    
    margin = int(margin_entry.get())
    filenames = [f for f in os.listdir(folder_path) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

    progress_bar["maximum"] = len(filenames)
    
    for i, filename in enumerate(filenames):
        image_path = os.path.join(folder_path, filename)
        image = cv2.imread(image_path)
        if image is None:
            continue

        # Convert the BGR image to RGB for MediaPipe
        results = hands.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

        if not results.multi_hand_landmarks:
            continue

        h, w, _ = image.shape
        x_coords, y_coords = [], []

        # Collect all hand landmarks
        for hand_landmarks in results.multi_hand_landmarks:
            for lm in hand_landmarks.landmark:
                x_coords.append(int(lm.x * w))
                y_coords.append(int(lm.y * h))

        # Calculate the bounding box
        x_min = max(min(x_coords) - margin, 0)
        x_max = min(max(x_coords) + margin, w)
        y_min = max(min(y_coords) - margin, 0)
        y_max = min(max(y_coords) + margin, h)

        # Calculate the center of the bounding box
        center_x = (x_min + x_max) // 2
        center_y = (y_min + y_max) // 2

        # Define the size of the cropped region
        crop_size = 1024
        half_crop_size = crop_size // 2

        # Adjust the crop size if the bounding box is larger than the crop size
        if (x_max - x_min) > crop_size:
            half_crop_size = (x_max - x_min) // 2
        if (y_max - y_min) > crop_size:
            half_crop_size = max(half_crop_size, (y_max - y_min) // 2)

        # Ensure the crop area is within image boundaries
        crop_x_min = max(center_x - half_crop_size, 0)
        crop_x_max = min(center_x + half_crop_size, w)
        crop_y_min = max(center_y - half_crop_size, 0)
        crop_y_max = min(center_y + half_crop_size, h)

        # Adjust the crop if it goes out of the image bounds
        if crop_x_max - crop_x_min < crop_size:
            if crop_x_min == 0:
                crop_x_max = min(crop_x_min + crop_size, w)
            else:
                crop_x_min = max(crop_x_max - crop_size, 0)
        if crop_y_max - crop_y_min < crop_size:
            if crop_y_min == 0:
                crop_y_max = min(crop_y_min + crop_size, h)
            else:
                crop_y_min = max(crop_y_max - crop_size, 0)

        # Crop the image
        cropped_image = image[crop_y_min:crop_y_max, crop_x_min:crop_x_max]

        # Resize the image to 1024x1024 if needed
        if cropped_image.shape[0] < crop_size or cropped_image.shape[1] < crop_size:
            cropped_image = cv2.resize(cropped_image, (crop_size, crop_size), interpolation=cv2.INTER_LINEAR)

        # Save the cropped and centered image
        output_path = os.path.join(output_folder, filename)
        cv2.imwrite(output_path, cropped_image)

        # Update the progress bar
        progress_bar["value"] = i + 1
        progress_label.config(text=f"Processing image {i + 1} of {len(filenames)}")
        root.update_idletasks()

    status_label.config(text=f"Processing complete! Images saved in: {output_folder}")
    progress_label.config(text="Processing complete!")

    # Open the output folder
    if os.name == 'nt':  # Windows
        os.startfile(output_folder)
    elif os.name == 'posix':  # MacOS or Linux
        subprocess.Popen(['open', output_folder])
    else:
        messagebox.showinfo("Output Folder", f"Processed images saved in: {output_folder}")

def start_processing():
    folder_path = folder_label.cget("text").replace("Selected Folder: ", "")
    if folder_path:
        process_thread = threading.Thread(target=process_images, args=(folder_path,))
        process_thread.start()
    else:
        messagebox.showwarning("No folder selected", "Please select a folder to process images.")

def cancel_processing():
    root.destroy()

# Create the GUI
root = tk.Tk()
root.title("Hand Detection and Cropping Tool")
root.geometry("500x350")

select_button = tk.Button(root, text="Select Folder", command=select_folder)
select_button.pack(pady=10)

folder_label = tk.Label(root, text="No folder selected")
folder_label.pack()

# Margin Entry
margin_label = tk.Label(root, text="Margin (pixels):")
margin_label.pack()
margin_entry = tk.Entry(root)
margin_entry.insert(0, "200")  # Default margin value
margin_entry.pack()

# Progress Bar
progress_label = tk.Label(root, text="Progress:")
progress_label.pack()
progress_bar = Progressbar(root, orient=tk.HORIZONTAL, length=400, mode='determinate')
progress_bar.pack(pady=10)

# OK and Cancel Buttons
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

ok_button = tk.Button(button_frame, text="OK", command=start_processing)
ok_button.pack(side=tk.LEFT, padx=10)

cancel_button = tk.Button(button_frame, text="Cancel", command=cancel_processing)
cancel_button.pack(side=tk.RIGHT, padx=10)

status_label = tk.Label(root, text="")
status_label.pack()

root.mainloop()
